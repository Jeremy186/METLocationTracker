@model MapsProposal.Models.Location



@{
    ViewBag.Title = "Home";
}

    <input id="pac-input" class="controls" type="text" placeholder="Search Box">
    <div id="map"></div>
    <div id="save">
        <input type="text" id="locationName" placeholder="Add name" />
        <p id="lat"></p>
        <p id="lng"></p>
        <button id="save" text="Save this location" onclick="getCoordinates()">Store this location</button>
    </div>

    <script>

      //declare map and marker objects
      var map;
      var marker;
      var infoWindow;
      var formElement = "<input type='text' id='locationName' placeholder='Add name' /><input type='button' value='Store location' onclick='addLocation();' />"

      //get the coordinates of the marker
      function getCoordinates() {
        var coords = marker.getPosition()
        alert(coords)

      }

      //add a marker to the map
      function placeMarker(location) {
            if(marker!= null){marker.setMap(null)}
            marker = new google.maps.Marker({
            position: location,
            map: map
        });
        document.getElementById('lat').innerHTML = location.lat()
        document.getElementById('lng').innerHTML = location.lng()
      }

      function initMap() {
          infoWindow = new google.maps.InfoWindow();
          map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: -33.8688, lng: 151.2195},
          zoom: 13,
          mapTypeId: google.maps.MapTypeId.ROADMAP
          });

          map.addListener('rightclick', function (event) {
              placeMarker(event.latLng);

          });

          // Create the search box and link it to the UI element.
          var input = document.getElementById('pac-input');
          var searchBox = new google.maps.places.SearchBox(input);
          map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);



          // Bias the SearchBox results towards current map's viewport.
          map.addListener('bounds_changed', function () {
              searchBox.setBounds(map.getBounds());
          });

          var markers = [];
          // Listen for the event fired when the user selects a prediction and retrieve
          // more details for that place.
          searchBox.addListener('places_changed', function () {
              var places = searchBox.getPlaces();

              if (places.length == 0) {
                  return;
              }

              // Clear out the old markers.
              markers.forEach(function (marker) {
                  marker.setMap(null);
              });
              markers = [];

              // For each place, get the icon, name and location.
              var bounds = new google.maps.LatLngBounds();
              places.forEach(function (place) {
                  var icon = {
                      url: place.icon,
                      size: new google.maps.Size(71, 71),
                      origin: new google.maps.Point(0, 0),
                      anchor: new google.maps.Point(17, 34),
                      scaledSize: new google.maps.Size(25, 25)
                  };

                  // Create a marker for each place.
                  markers.push(new google.maps.Marker({
                      map: map,
                      icon: icon,
                      title: place.name,
                      position: place.geometry.location
                  }));

                  if (place.geometry.viewport) {
                      // Only geocodes have viewport.
                      bounds.union(place.geometry.viewport);
                  } else {
                      bounds.extend(place.geometry.location);
                  }
              });
              map.fitBounds(bounds);
          });
      }

    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAHH2xW97a6O5sf8XvXxfxyBQet31lmlLQ&libraries=places&callback=initMap"
            async defer></script>

